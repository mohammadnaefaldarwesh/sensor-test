"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var event_emitter_1 = __importDefault(require("event-emitter"));
var Server_1 = require("../../Server");
var ConnectedServer = /** @class */ (function () {
    function ConnectedServer(client, id, url) {
        var _this = this;
        this.client = client;
        this.id = id;
        this.url = url;
        this.events = event_emitter_1.default();
        this.listeners = new Map();
        this.on = function (topic, callback) {
            _this.events.on(topic, callback);
            if (!_this.listeners.has(topic)) {
                var clientCallback = _this.client.on(topic, function (data, event) {
                    if (event.from === _this.id)
                        _this.events.emit(topic, data, event);
                });
                _this.listeners.set(topic, clientCallback);
            }
            return callback;
        };
        this.off = function (topic, callback) {
            return _this.events.off(topic, callback);
        };
        this.handlePing = function () {
            _this.clearDisposeTimer();
            _this.addDisposeTimer();
            _this.lastPing = +new Date();
        };
        this.handlePing();
        this.on('pong', this.handlePing);
    }
    ConnectedServer.prototype.emit = function (topic, data) {
        this.client.emit(topic, data, this.id);
    };
    ConnectedServer.prototype.addDisposeTimer = function () {
        var _this = this;
        this.disposeTimer = setTimeout(function () { return _this.dispose(); }, Server_1.PONG_INTERVAL + 1500);
    };
    ConnectedServer.prototype.clearDisposeTimer = function () {
        clearTimeout(this.disposeTimer);
    };
    ConnectedServer.prototype.dispose = function () {
        this.events.emit('disconnect');
        this.clearDisposeTimer();
        for (var _i = 0, _a = Array.from(this.listeners.entries()); _i < _a.length; _i++) {
            var _b = _a[_i], topic = _b[0], callback = _b[1];
            this.client.off(topic, callback);
        }
        this.client.servers.delete(this.id);
    };
    return ConnectedServer;
}());
exports.ConnectedServer = ConnectedServer;
//# sourceMappingURL=ConnectedServer.js.map