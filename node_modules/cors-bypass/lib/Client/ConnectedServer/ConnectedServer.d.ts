import { ServerID, IServerTopics, IClientTopics, IClientEvent } from '../../types';
import { Client } from '../Client';
export declare type IConnectedServerTopics = IClientTopics & {
    disconnect: null;
};
export declare type IConnectedServerEventHandler = <Topic extends keyof IConnectedServerTopics>(topic: Topic, callback: (data: IConnectedServerTopics[Topic], event?: Topic extends keyof IClientTopics ? IClientEvent<Topic> : undefined) => void) => void;
export declare class ConnectedServer {
    private client;
    id: ServerID;
    url: string;
    private events;
    private disposeTimer;
    private listeners;
    lastPing: number;
    constructor(client: Client, id: ServerID, url: string);
    emit<Topic extends keyof IServerTopics>(topic: Topic, data?: IServerTopics[Topic]): void;
    on: IConnectedServerEventHandler;
    off: IConnectedServerEventHandler;
    private handlePing;
    private addDisposeTimer;
    private clearDisposeTimer;
    dispose(): void;
}
//# sourceMappingURL=ConnectedServer.d.ts.map