import { IClientTopics, IServerTopics, ServerID, IClientEvent } from '../types';
import { ConnectedServer } from './ConnectedServer';
export declare type IClientEventHandler = <Topic extends keyof IClientTopics>(topic: Topic, callback: (data: IClientTopics[Topic], event: IClientEvent<Topic>) => void) => void;
export declare const PING_INTERVAL = 1000;
export declare class Client {
    private id;
    private pingTimer;
    private rxEvents;
    private rx;
    private tx;
    servers: Map<string, ConnectedServer>;
    once: IClientEventHandler;
    off: IClientEventHandler;
    on: IClientEventHandler;
    constructor();
    readonly server: ConnectedServer;
    dispose(): void;
    emit<Topic extends keyof IServerTopics>(topic: Topic, data?: IServerTopics[Topic], serverId?: ServerID): void;
    openServerInNewTab({ serverUrl, adapterUrl, reloadForFocus }?: {
        serverUrl: string;
        adapterUrl: string;
        reloadForFocus?: boolean;
    }): Promise<void>;
}
export declare const getClient: () => Client;
//# sourceMappingURL=Client.d.ts.map