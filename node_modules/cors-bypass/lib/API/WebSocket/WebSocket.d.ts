import { EventTarget } from 'event-target-shim';
import { WebSocketData } from '../../types';
export declare class WebSocket extends EventTarget {
    url: string;
    private client;
    private server;
    private id;
    private _binaryType;
    static CONNECTING: number;
    static OPEN: number;
    static CLOSING: number;
    static CLOSED: number;
    onclose: ((this: WebSocket, ev: CloseEvent) => any) | null;
    onerror: ((this: WebSocket, ev: Event) => any) | null;
    onmessage: ((this: WebSocket, ev: MessageEvent) => any) | null;
    onopen: ((this: WebSocket, ev: Event) => any) | null;
    CONNECTING: number;
    OPEN: number;
    CLOSING: number;
    CLOSED: number;
    readyState: number;
    bufferedAmount: number;
    extensions: string;
    protocol: string;
    binaryType: BinaryType;
    constructor(url: string, protocols?: string | string[]);
    send(data: WebSocketData): void;
    close(code?: number, reason?: string): void;
    private handleWebsocketEvent;
    private handleWebsocketInfo;
}
//# sourceMappingURL=WebSocket.d.ts.map