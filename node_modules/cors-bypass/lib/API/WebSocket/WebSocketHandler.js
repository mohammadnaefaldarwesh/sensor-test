"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketHandler = /** @class */ (function () {
    function WebSocketHandler(server, client) {
        this.server = server;
        this.client = client;
        this.websockets = new Map();
    }
    WebSocketHandler.prototype.newWebsocket = function (_a) {
        var _this = this;
        var url = _a.url, protocols = _a.protocols, id = _a.id;
        var ws = new WebSocket(url, protocols);
        var dispatchEvent = function (event) {
            var rest = {};
            [
                'data',
                'bubbles',
                'cancelBubble',
                'cancelable',
                'composed',
                'path',
                'timestamp'
            ].forEach(function (key) {
                var value = event[key];
                if (value !== undefined)
                    rest[key] = value;
            });
            _this.server.emit('websocketEvent', { type: event.type, id: id, rest: rest });
            if (event.type === 'open') {
                _this.server.emit('websocketInfo', {
                    id: id,
                    info: {
                        extensions: ws.extensions,
                        binaryType: ws.binaryType,
                        protocol: ws.protocol
                    }
                });
            }
        };
        ws.onerror = dispatchEvent;
        ws.onopen = dispatchEvent;
        ws.onclose = dispatchEvent;
        ws.onmessage = dispatchEvent;
        this.websockets.set(id, ws);
    };
    WebSocketHandler.prototype.websocketInfo = function (_a) {
        var info = _a.info, id = _a.id;
        var ws = this.websockets.get(id);
        if (ws)
            Object.keys(info).forEach(function (key) {
                ws[key] = info[key];
            });
    };
    WebSocketHandler.prototype.websocketSend = function (_a) {
        var id = _a.id, data = _a.data;
        var ws = this.websockets.get(id);
        if (ws)
            ws.send(data);
    };
    WebSocketHandler.prototype.websocketClose = function (_a) {
        var code = _a.code, reason = _a.reason, id = _a.id;
        var ws = this.websockets.get(id);
        if (ws)
            ws.close(code, reason);
    };
    WebSocketHandler.prototype.dispose = function () {
        this.websockets.forEach(function (ws) { return ws.close(); });
    };
    return WebSocketHandler;
}());
exports.WebSocketHandler = WebSocketHandler;
//# sourceMappingURL=WebSocketHandler.js.map