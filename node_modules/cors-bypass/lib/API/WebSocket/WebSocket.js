"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var event_target_shim_1 = require("event-target-shim");
var Client_1 = require("../../Client");
var lastId = 0;
var createId = function () { return ++lastId; };
var WebSocket = /** @class */ (function (_super) {
    __extends(WebSocket, _super);
    function WebSocket(url, protocols) {
        var _this = _super.call(this) || this;
        _this.url = url;
        _this.client = Client_1.getClient();
        _this.server = _this.client.server;
        _this.id = createId();
        _this._binaryType = 'blob';
        _this.CONNECTING = WebSocket.CONNECTING;
        _this.OPEN = WebSocket.OPEN;
        _this.CLOSING = WebSocket.CLOSING;
        _this.CLOSED = WebSocket.CLOSED;
        _this.readyState = WebSocket.CONNECTING;
        _this.bufferedAmount = 0;
        _this.extensions = '';
        _this.protocol = '';
        _this.handleWebsocketEvent = function (_a) {
            var id = _a.id, type = _a.type, rest = _a.rest;
            if (id !== _this.id)
                return;
            var event = type === 'close'
                ? new CloseEvent('close', rest)
                : type === 'message'
                    ? new MessageEvent('message', rest)
                    : new Event(type, rest);
            _this.dispatchEvent(event);
        };
        _this.handleWebsocketInfo = function (_a) {
            var id = _a.id, info = _a.info;
            if (id !== _this.id)
                return;
            Object.keys(info).forEach(function (key) { return (_this[key] = info[key]); });
        };
        _this.addEventListener('close', function () {
            _this.readyState = WebSocket.CLOSED;
            if (_this.server) {
                _this.server.off('websocketEvent', _this.handleWebsocketEvent);
                _this.server.off('websocketInfo', _this.handleWebsocketInfo);
            }
        });
        _this.addEventListener('open', function () {
            _this.readyState = WebSocket.OPEN;
        });
        if (_this.server) {
            _this.server.emit('newWebsocket', { id: _this.id, url: url, protocols: protocols });
            _this.server.on('disconnect', function () {
                return _this.handleWebsocketEvent({ id: _this.id, type: 'close' });
            });
            _this.server.on('websocketEvent', _this.handleWebsocketEvent);
            _this.server.on('websocketInfo', _this.handleWebsocketInfo);
        }
        else {
            // run async
            setTimeout(function () {
                return _this.handleWebsocketEvent({ id: _this.id, type: 'error' });
            });
        }
        return _this;
    }
    Object.defineProperty(WebSocket.prototype, "binaryType", {
        get: function () {
            return this._binaryType;
        },
        set: function (binaryType) {
            this._binaryType = binaryType;
            this.server &&
                this.server.emit('websocketInfo', {
                    id: this.id,
                    info: { binaryType: binaryType }
                });
        },
        enumerable: true,
        configurable: true
    });
    WebSocket.prototype.send = function (data) {
        if (!this.server || this.readyState !== WebSocket.OPEN)
            throw new Error();
        this.server.emit('websocketSend', { id: this.id, data: data });
    };
    WebSocket.prototype.close = function (code, reason) {
        this.readyState = WebSocket.CLOSING;
        this.server &&
            this.server.emit('websocketClose', { id: this.id, code: code, reason: reason });
    };
    WebSocket.CONNECTING = 0;
    WebSocket.OPEN = 1;
    WebSocket.CLOSING = 2;
    WebSocket.CLOSED = 3;
    return WebSocket;
}(event_target_shim_1.EventTarget));
exports.WebSocket = WebSocket;
event_target_shim_1.defineEventAttribute(WebSocket.prototype, 'close');
event_target_shim_1.defineEventAttribute(WebSocket.prototype, 'error');
event_target_shim_1.defineEventAttribute(WebSocket.prototype, 'message');
event_target_shim_1.defineEventAttribute(WebSocket.prototype, 'open');
//# sourceMappingURL=WebSocket.js.map